import asyncio
import datetime
from loader import tenant_list, bot, bot_base
from keyboards import readings_send_init


from aiogram.exceptions import TelegramForbiddenError
from apscheduler.schedulers.asyncio import AsyncIOScheduler


sendler_inst = None


async def create_sendler():
    global sendler_inst
    sendler_inst = Sendler()
    # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–∏–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await sendler_inst.add_job_for_sendler()


async def send_reminder(interval):
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤. –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ü–∏–∫–ª–æ–≤. –í–Ω–µ—à–Ω–∏–π while –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ,
    —á—Ç–æ –±—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π for –ø—Ä–æ–π–¥–µ—Ç –ø–æ –≤—Å–µ–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞–º –≤—Å—Ç–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ø –ø–æ—Ç–æ–º –≤—Å–µ
    –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å while –±—É–¥–µ–º —Å –ø–æ–º–æ—â—å—é –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π"""

    for ten in tenant_list:
        ten_id = ten.get_tenant_id()
        print(ten, ten_id)
        print(ten.readings_dict)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü. –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ —Å–±—Ä–æ—Å–∏–ª–∏—Å—å, –∑–Ω–∞—á–∏—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
        if ten.readings_dict['cold']:
            print(ten.readings_dict)
            await bot_base.add_dept(
                ten_id=ten_id,
                data=ten.readings_dict['reporting_date'],
                cold=ten.readings_dict['cold'],
                hot=ten.readings_dict['hot'],
                electricity_day=ten.readings_dict['electricity_day'],
                electricity_night=ten.readings_dict['electricity_night'],
                heating=ten.readings_dict['heating'],
                payment_slip=ten.readings_dict['payment_slip'] if ten.readings_dict['payment_slip'] else None
            )

        # –° —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        ten.readings_dict['reporting_date'] = str(datetime.datetime.now().strftime("%d.%m.%Y"))

    ten_list_for_sending = tenant_list[:]  # –°–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞, —á—Ç–æ –±—ã –Ω–µ –Ω–∞–ø–æ—Ä—Ç–∞—á–∏—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º

    # –ï—Å–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç —É–∂–µ —Å–∫–∏–Ω—É–ª –ø–æ–∫–∞–∑–∞–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫,
    # –∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞ –∏—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    tenant_send = []

    while len(ten_list_for_sending) > 0:
        for ten in ten_list_for_sending:
            if not ten.check_readings_status():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π
                ten_id = ten.get_tenant_id()
                try:
                    await bot.send_message(
                        chat_id=ten_id,
                        text='–ü–æ—Ä–∞ —Å–Ω—è—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è!',
                        reply_markup=readings_send_init(ten_id)
                    )
                except TelegramForbiddenError:
                    print(ten_id)
                    pass
            else:
                tenant_send.append(ten)

        # –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç —Ç–µ—Ö —É–∂–µ —Å–∫–∏–Ω—É–ª –ø–æ–∫–∞–∑–∞–Ω–∏—è

        for ten in tenant_send:
            ten_list_for_sending.remove(ten)

        # –ü–æ—Å–ª–µ —á–µ–≥–æ, –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        tenant_send = []

        # –ò —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ —á–∞—Å–∞—Ö)
        await asyncio.sleep(interval*60*60)

    # –ò –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ False

    for ten in tenant_list:
        ten.reset_readings_status()


class Sendler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Å–Ω—è—Ç–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"""
    def __init__(self):
        self._scheduler = AsyncIOScheduler(gconfig={'apscheduler.timezone': 'Europe/Moscow'})
        self._scheduler.start()
        self._send_date = 21  # –ß–∏—Å–ª–æ, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤
        self._send_time = 9  # –í—Ä–µ–º—è –¥–Ω—è –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        self._interval = 2  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—è

    def get_settings_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        settings_string = (f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n'
                           f'<b>üìÜ –ß–∏—Å–ª–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {self._send_date}\n'
                           f'<b>‚åö –ß–∞—Å –¥–Ω—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {self._send_time}\n'
                           f'<b>‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b> {self._interval}')
        return settings_string

    async def add_job_for_sendler(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É"""
        self._scheduler.add_job(
            func=send_reminder,
            kwargs={'interval': self._interval},
            trigger='cron',
            day=self._send_date,
            hour=self._send_time,
            minute=38,
            id='send',
            max_instances=1,
            replace_existing=True
        )

    async def edit_send_data(self, new_data):
        """–ò–∑–º–µ–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        self._send_date = new_data
        await self.add_job_for_sendler()

    async def edit_send_time(self, new_time):
        """–ò–∑–º–µ–Ω—è–µ–º —á–∞—Å –¥–Ω—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å–∞ –¥–Ω—è —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        self._send_time = new_time
        await self.add_job_for_sendler()

    async def edit_interval(self, new_interval):
        """–ò–∑–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–π –æ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö"""
        self._interval = new_interval


class SendlerInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º"""

    @staticmethod
    async def set_new_data(new_data):
        await sendler_inst.edit_send_data(new_data)

    @staticmethod
    async def set_new_time(new_time):
        await sendler_inst.edit_send_time(new_time)

    @staticmethod
    async def set_new_interval(new_interval):
        await sendler_inst.edit_interval(new_interval)

    @staticmethod
    async def get_settings_info():
        return sendler_inst.get_settings_info()
