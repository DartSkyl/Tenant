import datetime
from sqlite3 import IntegrityError
from loader import bot, tenant_list, bot_base
from utils.admin_router import admin_router
from utils.tenant_model import Tenant
from utils.sendler import SendlerInterface
from keyboards import (main_menu, edit_tenant_data, settings, send_payment_slip,
                       send_ps, send_check, viewing_tenant, ten_rem_conf, view_history_checks)
from states import AdminStates
from config.configurations import ADMIN_ID

from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext


@admin_router.message(Command('start'))
async def start_function(msg: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await msg.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)


# ========== –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ==========


@admin_router.callback_query(F.data.startswith('rd_come_'))
async def catch_readings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    await callback.answer()
    ten_id = int(callback.data.replace('rd_come_', ''))
    await bot.send_message(chat_id=ten_id, text='<b>–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∫—É!</b>')
    ten_info = ''
    for ten in tenant_list:
        if ten.get_tenant_id() == ten_id:
            ten_info += ten.get_info_string()
            break
    msg_text = f'–ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç {ten_info} –æ–∂–∏–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∫—É\n\n<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>'

    for admin in ADMIN_ID:
        await bot.send_message(chat_id=admin, text=msg_text, reply_markup=send_payment_slip(ten_id))


@admin_router.callback_query(F.data.startswith('send_ps_'))
async def send_payment(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∏–Ω—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–ª–∞—Ç–µ–∂–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥—Ä–µ—Å–∞—Ç–∞"""
    await callback.answer()
    await state.set_data({'ten_id': int(callback.data.replace('send_ps_', ''))})
    await state.set_state(AdminStates.send_first_payment_slip)
    await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–ª–∞—Ç–µ–∂–∫—É:')


@admin_router.message(AdminStates.send_first_payment_slip)
async def catch_first_payment_slip(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –ø–ª–∞—Ç–µ–∂–∫—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç"""
    if msg.photo:
        await state.update_data({'first_payment_slip': (msg.photo[-1].file_id, 'photo')})
        await msg.answer('–°–∫–∏–Ω—å—Ç–µ –≤—Ç–æ—Ä—É—é –ø–ª–∞—Ç–µ–∂–∫—É:')
        await state.set_state(AdminStates.send_second_payment_slip)
    elif msg.document:
        await state.update_data({'first_payment_slip': (msg.document.file_id, 'document')})
        await msg.answer('–°–∫–∏–Ω—å—Ç–µ –≤—Ç–æ—Ä—É—é –ø–ª–∞—Ç–µ–∂–∫—É:')
        await state.set_state(AdminStates.send_second_payment_slip)


@admin_router.message(AdminStates.send_second_payment_slip)
async def catch_second_payment_slip(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –ø–ª–∞—Ç–µ–∂–∫—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç"""
    ten_id = (await state.get_data())['ten_id']

    if msg.photo:
        await state.update_data({'second_payment_slip': (msg.photo[-1].file_id, 'photo')})
        await msg.answer(text='–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–ª–∞—Ç–µ–∂–∫–∏ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=send_ps(ten_id))

    elif msg.document:
        await state.update_data({'second_payment_slip': (msg.document.file_id, 'document')})
        await msg.answer(text='–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–ª–∞—Ç–µ–∂–∫–∏ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=send_ps(ten_id))


@admin_router.callback_query(AdminStates.send_second_payment_slip, F.data.startswith('sps_'))
async def payment_slip_go_to_tenant(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∫—É –∞–¥—Ä–µ—Å–∞—Ç—É"""
    await callback.answer()

    if callback.data != 'sps_del':

        payment_slip_info = await state.get_data()

        ten_info = ''

        for ten in tenant_list:
            if ten.get_tenant_id() == payment_slip_info['ten_id']:
                ten_info += ten.get_info_string()

                # –ò —Å—Ä–∞–∑—É –∑–∞–Ω–æ—Å–∏–º –ø–ª–∞—Ç–µ–∂–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

                ten.readings_dict['payment_slip'] = payment_slip_info['first_payment_slip'][0] + '^^^^^' + \
                                                    payment_slip_info['first_payment_slip'][1] + '$$$'
                ten.readings_dict['payment_slip'] += payment_slip_info['second_payment_slip'][0] + '^^^^^' + \
                                                     payment_slip_info['second_payment_slip'][1]
                break
        msg_text = f'–ü–ª–∞—Ç–µ–∂–∫–∞ –¥–ª—è {ten_info} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'

        if payment_slip_info['first_payment_slip'][1] == 'photo':
            await bot.send_photo(
                chat_id=payment_slip_info['ten_id'],
                photo=payment_slip_info['first_payment_slip'][0],
                caption=f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>',
            )
            await state.clear()

        elif payment_slip_info['first_payment_slip'][1] == 'document':
            await bot.send_document(
                chat_id=payment_slip_info['ten_id'],
                document=payment_slip_info['first_payment_slip'][0],
                caption=f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>',
            )
            await state.clear()

        if payment_slip_info['second_payment_slip'][1] == 'photo':
            await bot.send_photo(
                chat_id=payment_slip_info['ten_id'],
                photo=payment_slip_info['second_payment_slip'][0],
                caption=f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>',
                reply_markup=send_check
            )

        elif payment_slip_info['second_payment_slip'][1] == 'document':
            await bot.send_document(
                chat_id=payment_slip_info['ten_id'],
                document=payment_slip_info['second_payment_slip'][0],
                caption=f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>',
                reply_markup=send_check
            )

        for admin in ADMIN_ID:
            await bot.send_message(chat_id=admin, text=msg_text)
    else:
        await state.set_state(AdminStates.send_first_payment_slip)
        await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–ª–∞—Ç–µ–∂–∫—É:')


@admin_router.callback_query(F.data.startswith('ch_conf_'))
async def check_confirming(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ"""
    await callback.answer()
    ten_id = int(callback.data.replace('ch_conf_', ''))
    ten_info = ''

    for ten in tenant_list:
        if ten.get_tenant_id() == ten_id:
            ten_info += ten.get_info_string()
            await bot_base.add_report(
                ten_id=ten.get_tenant_id(),
                data=ten.readings_dict['reporting_date'],
                cold=ten.readings_dict['cold'],
                hot=ten.readings_dict['hot'],
                electricity_day=ten.readings_dict['electricity_day'],
                electricity_night=ten.readings_dict['electricity_night'],
                heating=ten.readings_dict['heating'],
                payment_slip=ten.readings_dict['payment_slip'],
                check_id=ten.readings_dict['check']
            )
            ten.reset_readings()
            break
    await bot.send_message(chat_id=ten_id, text='–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')

    msg_text = (f'–ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç {ten_info} –æ–ø–ª–∞—Ç–∏–ª –∫–æ–º–º—É–Ω–∞–ª–∫—É!\n\n'
                f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>')

    for admin in ADMIN_ID:
        await bot.send_message(chat_id=admin, text=msg_text)


# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–æ–≤ ==========

@admin_router.callback_query(F.data.startswith('hist_true_'))
async def view_tenant_history_pay(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞"""
    await callback.answer()
    await state.set_data({'empty': None})  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—Ç—å data –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–µ
    ten_history = await bot_base.get_tenant_history(callback.data.replace('hist_true_', ''))
    for elem in ten_history:
        msg_text = (f'<b>üìÜ –û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> {elem[1]}\n'
                    f'<b>‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞:</b> {elem[2]}\n'
                    f'<b>üî• –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞:</b> {elem[3]}\n'
                    f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—å:</b> {elem[4]}\n'
                    f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á—å:</b> {elem[5]}\n'
                    f'<b>üå°Ô∏è –û—Ç–æ–ø–ª–µ–Ω–∏–µ:</b> {elem[6]}')

        # –ö–ª—é—á —ç—Ç–æ ID –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞ –∏ –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ file_id –ø–ª–∞—Ç–µ–∂–∫–∏ –∏ —á–µ–∫–∞
        # –î–∞ –∏–∑–≤—Ä–∞—â–µ–Ω–∏–µ, –Ω–æ –ª—É—á—à–µ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª!
        await state.update_data({f'{elem[0]}_{elem[1]}': (f'{elem[7]}', f'{elem[8]}')})
        await callback.message.answer(
            text=msg_text,
            reply_markup=view_history_checks(f'{elem[0]}_{elem[1]}',
                                             pay_status=True)
        )


@admin_router.callback_query(F.data.startswith('hist_false_'))
async def view_tenant_history_(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —Ç–æ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    await callback.answer()
    empty_answer = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–æ'
    message_markup = None
    ten_id = int(callback.data.replace('hist_false_', ''))
    for ten in tenant_list:
        if ten.get_tenant_id() == ten_id:
            ten_readings_info = ten.get_readings_dict()
            msg_text = (f'<b>üìÜ –û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> {ten_readings_info["reporting_date"]}\n'
                        f'<b>‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞:</b> {ten_readings_info["cold"]}\n'
                        f'<b>üî• –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞:</b> {ten_readings_info["hot"]}\n'
                        f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—å:</b> {ten_readings_info["electricity_day"]}\n'
                        f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á—å:</b> {ten_readings_info["electricity_night"]}\n'
                        f'<b>üå°Ô∏è –û—Ç–æ–ø–ª–µ–Ω–∏–µ:</b> {ten_readings_info["heating"]}') if ten_readings_info["cold"] else (
                empty_answer)
            if ten_readings_info["payment_slip"]:
                await state.set_data({'payment_slip': (ten_readings_info["payment_slip"], '')})
                message_markup = view_history_checks(doc_key='payment_slip')
            await callback.message.answer(text=msg_text, reply_markup=message_markup)
            break


@admin_router.callback_query(F.data.startswith('p_'))
async def view_payment_slip(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–ª–∞—Ç–µ–∂–∫—É"""
    await callback.answer()
    pay_slip = (await state.get_data())[callback.data.replace('p_', '')][0].split('$$$')
    pay_slip = [pay.split('^^^^^') for pay in pay_slip]
    for pay in pay_slip:
        if pay[1] == 'document':
            await callback.message.answer_document(document=pay[0])
        else:
            await callback.message.answer_photo(photo=pay[0])


@admin_router.callback_query(F.data.startswith('ch_'))
async def view_payment_check(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —á–µ–∫ –æ–ø–ª–∞—Ç—ã –∫–æ–º–º—É–Ω–∞–ª–∫–∏"""
    await callback.answer()
    check = (await state.get_data())[callback.data.replace('ch_', '')][1].split('$$$')
    check = [pay.split('^^^^^') for pay in check]
    for pay in check:
        if pay[1] == 'document':
            await callback.message.answer_document(document=pay[0])
        else:
            await callback.message.answer_photo(photo=pay[0])


# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä/—É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–æ–≤ ==========

@admin_router.message(F.text == 'üìã –¢–µ–∫—É—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç—ã')
async def view_tenants(msg: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–æ–≤"""
    for ten in tenant_list:
        await msg.answer(text=ten.view_tenant(), reply_markup=viewing_tenant(ten.get_tenant_id()))


@admin_router.callback_query(F.data.startswith('del_'))
async def remove_tenant(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    await callback.answer()
    if callback.data == 'del_yes':
        rem_ten_id = (await state.get_data())['del_ten_id']
        for ten in tenant_list:
            if ten.get_tenant_id() == rem_ten_id:
                await bot_base.delete_tenant_from_base(rem_ten_id)
                tenant_list.remove(ten)
                break

        await callback.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

    elif callback.data == 'del_no':
        for ten in tenant_list:
            await callback.message.answer(text=ten.view_tenant(), reply_markup=viewing_tenant(ten.get_tenant_id()))
        await state.clear()
    else:
        ten_id = int(callback.data.replace('del_', ''))
        ten_info = ''

        for ten in tenant_list:
            if ten.get_tenant_id() == ten_id:
                ten_info += ten.get_info_string()
                break
        await state.set_data({'del_ten_id': ten_id})
        await callback.message.answer(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞ {ten_info}?',
                                      reply_markup=ten_rem_conf)


# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ==========


@admin_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def open_settings_menu(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await msg.answer(text=await SendlerInterface.get_settings_info(), reply_markup=settings)


@admin_router.callback_query(F.data.startswith('set_'))
async def init_settings_changes(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    settings_dict = {
        'set_data': (AdminStates.set_data, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:'),
        'set_time': (AdminStates.set_time, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∞—Å –¥–Ω—è:'),
        'set_interval': (AdminStates.set_interval, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —á–∞—Å–∞—Ö:')
    }

    await callback.answer()
    await callback.message.answer(text=settings_dict[callback.data][1])
    await state.set_state(settings_dict[callback.data][0])


@admin_router.message(AdminStates.set_data, F.text.isdigit())
async def set_new_data(msg: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    if 0 < int(msg.text) < 32:
        await SendlerInterface.set_new_data(new_data=int(msg.text))
        await open_settings_menu(msg=msg)
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31')


@admin_router.message(AdminStates.set_time, F.text.isdigit())
async def set_new_time(msg: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
    if 0 <= int(msg.text) <= 23:
        await SendlerInterface.set_new_time(new_time=int(msg.text))
        await open_settings_menu(msg=msg)
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23')


@admin_router.message(AdminStates.set_interval, F.text.isdigit())
async def set_new_interval(msg: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await SendlerInterface.set_new_interval(new_interval=int(msg.text))
    await open_settings_menu(msg=msg)


# ========== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞ ==========


@admin_router.callback_query(F.data.startswith('reg_'))
async def tenant_registration_start(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞"""
    await callback.answer()
    await state.set_data({'user_id': int(callback.data.replace('reg_', ''))})
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞:')
    await state.set_state(AdminStates.address)


@admin_router.message(AdminStates.address)
async def catch_tenant_address(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞"""
    await state.update_data({'address': msg.text})
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç:')
    await state.set_state(AdminStates.tenant_name)


async def view_tenant_data(msg: Message, state: FSMContext):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    tenant_data = await state.get_data()
    msg_text = (f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                f'<b>–ê–¥—Ä–µ—Å:</b> {tenant_data["address"]}\n'
                f'<b>–ò–º—è:</b> {tenant_data["name"]}\n')
    await msg.answer(text=msg_text, reply_markup=edit_tenant_data)
    await state.set_state(AdminStates.data_edit)


@admin_router.message(AdminStates.tenant_name)
async def catch_tenant_name(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∏–º—è –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç"""
    await state.update_data({'name': msg.text})
    await view_tenant_data(msg=msg, state=state)


@admin_router.callback_query(F.data.startswith('edit_'))
async def edit_tenant_data_func(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º"""
    await callback.answer()
    if callback.data != 'edit_registration':
        data_dict = {
            'edit_address': (AdminStates.edit_address, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:'),
            'edit_name': (AdminStates.edit_name, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:'),
        }

        await callback.message.answer(text=data_dict[callback.data][1])
        await state.set_state(data_dict[callback.data][0])

    else:
        tenant_data = await state.get_data()

        try:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await bot_base.add_tenant(
                address=tenant_data['address'],
                name=tenant_data['name'],
                user_id=tenant_data['user_id']
            )

            tenant = Tenant(
                address=tenant_data['address'],
                name=tenant_data['name'],
                user_id=tenant_data['user_id']
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            tenant_list.append(tenant)

            await bot.send_message(chat_id=tenant_data['user_id'],
                                   text='–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–∞-–∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞!')
            await callback.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

            for admin in ADMIN_ID:
                if admin != callback.from_user.id:
                    await bot.send_message(chat_id=admin,
                                           text=f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç <b>{tenant_data["name"]}</b>'
                                                f' –ø–æ –∞–¥—Ä–µ—Å—É <b>{tenant_data["address"]}</b>')
        except IntegrityError:
            await callback.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        await start_function(msg=callback.message, state=state)


@admin_router.message(AdminStates.edit_address)
async def edit_address(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞"""
    await state.update_data({'address': msg.text})
    await msg.answer('–ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω–µ–Ω')
    await view_tenant_data(msg=msg, state=state)


@admin_router.message(AdminStates.edit_name)
async def tenant_new_name(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –∏–º—è –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç–∞"""
    await state.update_data({'name': msg.text})
    await msg.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ')
    await view_tenant_data(msg=msg, state=state)
