import datetime
from loader import bot, tenant_list, bot_base
from config.configurations import ADMIN_ID
from utils.tenant_router import tenant_router
from utils.tenant_model import Tenant
from keyboards import (registration_application, readings_editor, need_heating,
                       confirm_sending, readings_come, check_ready, confirm_check)
from states import Tenant

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext


async def view_readings(msg: Message, state: FSMContext):
    """–í—ã–≤–æ–¥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    readings_data = await state.get_data()
    msg_text = (f'<b><i>–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:</i></b>\n\n'
                f'<b>‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞:</b> {readings_data["cold"]}\n'
                f'<b>üî• –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞:</b> {readings_data["hot"]}\n'
                f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</b>{readings_data["electricity"]}\n'
                f'<b>üå°Ô∏è –û—Ç–æ–ø–ª–µ–Ω–∏–µ:</b> {readings_data["heating"]}')

    await msg.answer('<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π</b>‚ùó')
    await msg.answer(text=msg_text, reply_markup=readings_editor)
    await state.set_state(Tenant.view_readings)


@tenant_router.message(Command('start'))
async def start_for_tenants(msg: Message):
    """–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    id_list = await bot_base.get_tenants_id()
    if msg.from_user.id not in id_list:
        msg_text = f'–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç <b>{msg.from_user.full_name}</b>'
        await msg.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ.')
        for admin in ADMIN_ID:
            await bot.send_message(chat_id=admin, text=msg_text,
                                   reply_markup=registration_application(msg.from_user.id))
    else:
        await msg.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç!\n'
                         '–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–∏–Ω—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤')


@tenant_router.callback_query(F.data.startswith('readings_'))
async def start_readings_send(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–∫–∏–¥—ã–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤"""
    await state.set_data({'tenant_id': callback.data.replace('readings_', '')})
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n'
                                  '<b>—Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ</b>\n')
    await state.set_state(Tenant.set_readings)


@tenant_router.message(Tenant.set_readings, F.text.regexp(r'\d{1,}\s\d{1,}\s\d{1,}$'))
async def catch_readings(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–æ–º"""
    readings = msg.text.split()
    await state.update_data({'cold': readings[0], 'hot': readings[1], 'electricity': readings[2]})
    await msg.answer(text='–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏–µ?', reply_markup=need_heating)


@tenant_router.message(Tenant.set_readings)
async def error_input(msg: Message):
    """–û—à–∏–±–æ—á–Ω—ã–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    await msg.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª—ã–µ —á–∏—Å–ª–æ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤‚ùó')


@tenant_router.callback_query(F.data == 'heating_yes')
async def heating(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ä—Ç—É–µ–º –ª–æ–≤–ª—é —Ç–µ–ø–ª–∞"""
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è:')
    await state.set_state(Tenant.heating)


@tenant_router.message(Tenant.heating)
async def catch_heating(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–ø–ª–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    await state.update_data({'heating': msg.text})
    await view_readings(msg=msg, state=state)


@tenant_router.callback_query(F.data == 'heating_no')
async def no_heating(callback: CallbackQuery, state: FSMContext):
    """–ï—Å–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer()
    await state.update_data({'heating': '0'})
    await view_readings(msg=callback.message, state=state)


@tenant_router.callback_query(F.data.startswith('read_edit_'))
async def edit_readings(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–º–µ–Ω—É –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    readings_editor_dict = {
        'read_edit_cold': (Tenant.edit_cold_water, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã:'),
        'read_edit_hot': (Tenant.edit_hot_water, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã:'),
        'read_edit_elect': (Tenant.edit_electricity, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞:'),
        'read_edit_heating': (Tenant.edit_heating, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è:')
    }

    await callback.answer()
    await callback.message.answer(readings_editor_dict[callback.data][1])
    await state.set_state(readings_editor_dict[callback.data][0])


@tenant_router.message(Tenant.edit_cold_water)
async def edit_cold_water(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã"""
    await state.update_data({'cold': msg.text})
    await view_readings(msg=msg, state=state)


@tenant_router.message(Tenant.edit_hot_water)
async def edit_hot_water(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã"""
    await state.update_data({'hot': msg.text})
    await view_readings(msg=msg, state=state)


@tenant_router.message(Tenant.edit_electricity)
async def edit_electricity(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞"""
    await state.update_data({'electricity': msg.text})
    await view_readings(msg=msg, state=state)


@tenant_router.message(Tenant.edit_heating)
async def edit_heating(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è"""
    await state.update_data({'heating': msg.text})
    await view_readings(msg=msg, state=state)


@tenant_router.callback_query(Tenant.view_readings, F.data.startswith('send_'))
async def send_readings_func(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –∞–¥–º–∏–Ω—É, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ—Ç–ø—Ä–∞–≤–∫—É"""
    await callback.answer()
    if callback.data == 'send_readings':
        await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=confirm_sending)
    elif callback.data == 'send_confirm':
        readings = await state.get_data()
        tenant_info = ''
        for ten in tenant_list:
            if ten.get_tenant_id() == int(readings['tenant_id']):
                tenant_info += ten.get_info_string()
                ten.readings_sent()  # –ó–∞–æ–¥–Ω–æ —É–∫–∞–∂–µ–º, —á—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∫–∞–∑–∞–Ω–∏—è

                # –ê —Ç–∞–∫ –∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ –±—ã –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é

                ten.readings_dict['cold'] = readings["cold"]
                ten.readings_dict['hot'] = readings["hot"]
                ten.readings_dict['electricity'] = readings["electricity"]
                ten.readings_dict['heating'] = readings["heating"]
                break

        msg_text = (f'<i>–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ {tenant_info}:</i>\n\n'
                    f'<b>‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞:</b> {readings["cold"]}\n'
                    f'<b>üî• –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞:</b> {readings["hot"]}\n'
                    f'<b>‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</b>{readings["electricity"]}\n'
                    f'<b>üå°Ô∏è –û—Ç–æ–ø–ª–µ–Ω–∏–µ:</b> {readings["heating"]}\n\n'
                    f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>')

        for admin in ADMIN_ID:
            await bot.send_message(chat_id=admin, text=msg_text, reply_markup=readings_come(readings['tenant_id']))
        await callback.message.answer('–ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
        await state.clear()

    else:
        await view_readings(msg=callback.message, state=state)


@tenant_router.callback_query(F.data == 'check_send')
async def send_check_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–∞"""
    await callback.answer()
    await state.set_state(Tenant.send_first_check)
    await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ —á–µ–∫ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')


@tenant_router.message(Tenant.send_first_check)
async def catch_first_ten_check(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —á–µ–∫, –ª–∏–±–æ —Ñ–æ—Ç–æ, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∏–Ω—É—Ç—å –∑–∞–Ω–æ–≤–æ"""
    if msg.photo:
        await state.update_data({'first_check': (msg.photo[-1].file_id, 'photo')})
        await msg.answer('–°–∫–∏–Ω—å—Ç–µ –≤—Ç–æ—Ä–æ–π —á–µ–∫:')
        await state.set_state(Tenant.send_second_check)
    elif msg.document:
        await state.update_data({'first_check': (msg.document.file_id, 'document')})
        await msg.answer('–°–∫–∏–Ω—å—Ç–µ –≤—Ç–æ—Ä–æ–π —á–µ–∫:')
        await state.set_state(Tenant.send_second_check)


@tenant_router.message(Tenant.send_second_check)
async def catch_second_ten_check(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —á–µ–∫, –ª–∏–±–æ —Ñ–æ—Ç–æ, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∏–Ω—É—Ç—å –∑–∞–Ω–æ–≤–æ"""
    if msg.photo:
        await state.update_data({'second_check': (msg.photo[-1].file_id, 'photo')})
        await msg.answer(text='–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫–∏ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –∑–∞–Ω–æ–≤–æ',reply_markup=check_ready)

    elif msg.document:
        await state.update_data({'second_check': (msg.document.file_id, 'document')})
        await msg.answer(text='–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫–∏ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=check_ready)


@tenant_router.callback_query(F.data == 'check_ready')
async def send_check_to_admin(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    await callback.answer()
    payment_slip_info = await state.get_data()

    ten_info = ''

    for ten in tenant_list:
        if ten.get_tenant_id() == callback.from_user.id:
            ten_info += ten.get_info_string()

            # –ò —Å—Ä–∞–∑—É –∑–∞–Ω–æ—Å–∏–º —á–µ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

            ten.readings_dict['check'] = payment_slip_info['first_check'][0] + '^^^^^' + payment_slip_info['first_check'][1] + '$$$'
            ten.readings_dict['check'] += payment_slip_info['second_check'][0] + '^^^^^' + payment_slip_info['second_check'][1]

            break

    msg_text = f'–ß–µ–∫ –æ—Ç {ten_info}\n<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>'

    if payment_slip_info['first_check'][1] == 'photo':
        for admin in ADMIN_ID:
            await bot.send_photo(
                chat_id=admin,
                photo=payment_slip_info['first_check'][0],
                caption=msg_text,
            )
        await state.clear()

    elif payment_slip_info['first_check'][1] == 'document':
        for admin in ADMIN_ID:
            await bot.send_document(
                chat_id=admin,
                document=payment_slip_info['first_check'][0],
                caption=msg_text,
            )
        await state.clear()

    if payment_slip_info['second_check'][1] == 'photo':
        for admin in ADMIN_ID:
            await bot.send_photo(
                chat_id=admin,
                photo=payment_slip_info['second_check'][0],
                caption=msg_text,
                reply_markup=confirm_check(callback.from_user.id)
            )

    elif payment_slip_info['second_check'][1] == 'document':
        for admin in ADMIN_ID:
            await bot.send_document(
                chat_id=admin,
                document=payment_slip_info['second_check'][0],
                caption=msg_text,
                reply_markup=confirm_check(callback.from_user.id)
            )

    await callback.message.answer('–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')


@tenant_router.callback_query(F.data == 'check_del')
async def reload_check(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Tenant.send_first_check)
    await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ —á–µ–∫ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')
